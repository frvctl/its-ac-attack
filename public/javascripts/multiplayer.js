// Generated by CoffeeScript 1.3.3
(function() {
  var aUser, clear, countDuration, countStart, cumsum, currentGuess, currentQuestion, generateName, identifier, isCompleted, lastTime, message, publicname, revealDelay, serverTime, socket, stateUpdater, sync_offset, synchronize, tableOwner, testLatency, timeFreeze;

  aUser = document.getElementById("userName").value;

  socket = io.connect().of(channel_name);

  sync_offset = 0;

  currentQuestion = null;

  lastTime = null;

  revealDelay = null;

  tableOwner = null;

  isCompleted = false;

  timeFreeze = false;

  identifier = Math.random().toString(36).slice(3);

  currentGuess = "";

  socket.on("connect", function() {
    $("#chat").addClass("connected");
    $("#connecting").addClass("hide");
    socket.emit("user", aUser);
    socket.emit("join room", channel);
    clear();
    return $("#chat").addClass("nickname-set");
  });

  socket.on("currentQuestion", function(data) {
    var nextWord, pointer, q, words;
    nextWord = function() {
      var reader;
      $("#question").text(words.slice(0, ++pointer).join(" "));
      $("<span>").css("visibility", "hidden").text(words.slice(pointer).join(" ")).appendTo("#question");
      return reader = setTimeout(nextWord, readSpeed);
    };
    q = data[0];
    words = q.question.split(" ");
    pointer = 0;
    $("#year").text(q.year);
    $("#difficulty").text(q.difficulty);
    $("#category").text(q.category);
    $("#tournament").text(q.tournament);
    $("#answer").text(q.answer);
    return nextWord();
  });

  socket.on("answerResult", function(data) {
    if (data) {
      $("#answer").text("Your answer is correct!");
      return $("#question").text(data[0].question);
    } else {
      return $("#answer").text("Your answer is incorrect =(");
    }
  });

  socket.on("start", function(data) {
    $("#start").addClass("hide");
    $("#information").removeClass("hide");
    $("#buzzer").removeClass("hide");
    return $("#skip").removeClass("hide");
  });

  socket.on("lockout", function(data) {});

  socket.on("theBuzzer", function(data) {
    $("#answerDiv").removeClass("hide");
    $("#skip").addClass("hide");
    return $("#buzzer").addClass("hide");
  });

  socket.on("announcement", function(msg) {
    return $("#lines").append($("<p>").append($("<em>").text(" " + msg + " ")));
  });

  socket.on("names", function(names) {
    var i, _results;
    $("#nicknames").empty().append($("<span>Online: </span>"));
    _results = [];
    for (i in names) {
      _results.push($("#nicknames").append($("<b>").text(" " + names[i] + " ")));
    }
    return _results;
  });

  socket.on("user message", message);

  socket.on("reconnect", function() {
    $("#lines").remove();
    return message("System", "Reconnected to the server");
  });

  socket.on("reconnecting", function() {
    return message("System", "Attempting to re-connect to the server");
  });

  socket.on("error", function(e) {
    return message("System", (e ? e : "A unknown error occurred"));
  });

  $(document).ready(function() {
    var counter;
    counter = 0;
    $("#send-message").submit(function() {
      message("me", $("#message").val());
      socket.emit("user message", $("#message").val());
      clear();
      $("#lines").get(0).scrollTop = 10000000;
      return false;
    });
    $("#answerForm").submit(function(event) {
      event.preventDefault();
      socket.emit("answer", $("#answerInput").val());
      $("#answerDiv").addClass("hide");
      return $("#next").removeClass("hide");
    });
    $("#buzzer").click(function(event) {
      return socket.emit("buzzed", aUser);
    });
    $("#start").click(function(event) {
      return socket.emit("question", questNum);
    });
    return $("#next").click(function(event) {
      clearTimeout(reader);
      counter++;
      socket.emit("question", questNum + counter);
      return $("#next").addClass("hide");
    });
  });

  message = function(from, msg) {
    if (msg.length > 0) {
      return $("#lines").append($("<p>").append($("<b>").text(from + ": "), msg));
    }
  };

  clear = function() {
    return $("#message").val("").focus();
  };

  generateName = function() {
    var adjective, animal, pick;
    adjective = 'aberrant,agressive,warty,hoary,breezy,dapper,edgy,feisty,gutsy,hardy,intrepid,jaunty,karmic,lucid,maverick,natty,oneric,precise,quantal';
    animal = 'axolotl,warthog,hedgehog,badger,drake,fawn,gibbon,heron,ibex,jackalope,koala,lynx,meerkat,narwhal,ocelot,penguin,quetzal,kodiak,cheetah,puma,jaguar,panther,tiger,leopard,lion';
    pick = function(list) {
      var n;
      n = list.split(',');
      return n[Math.floor(n.length * Math.random())];
    };
    return pick(adjective) + " " + pick(animal);
  };

  publicname = generateName();

  serverTime = function() {
    if (timeFreeze) {
      return timeFreeze;
    } else {
      return +(new Date) - sync_offset;
    }
  };

  cumsum = function(list, rate) {
    var num, sum, _i, _len, _results;
    sum = 0;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      num = list[_i];
      _results.push(sum += Math.round(num) * rate);
    }
    return _results;
  };

  countDuration = 0;

  countStart = 0;

  stateUpdater = function() {
    var countdown, cumulative, endTimes, index, list, ms, rate, reveal, timeDelta, words, _ref;
    if (currentQuestion) {
      timeDelta = serverTime() - lastTime;
      words = currentQuestion.question.split(" ");
      _ref = currentQuestion.timing, list = _ref.list, rate = _ref.rate;
      cumulative = cumsum(list, rate);
      index = 0;
      while (timeDelta > cumulative[index]) {
        index++;
      }
      index++;
      if (isCompleted) {
        index = cumulative.length;
        reveal = 0;
      } else {
        endTimes = cumulative[cumulative.length - 1];
        reveal = endTimes + revealDelay + lastTime - serverTime();
      }
      document.querySelector('#answer').innerText = currentQuestion.answer;
      if (reveal <= 0) {
        document.querySelector('#answer').style.visibility = '';
      } else {
        document.querySelector('#answer').style.visibility = 'hidden';
      }
      reveal = Math.max(0, reveal);
      document.querySelector('#reveal').innerText = (reveal / 1000).toFixed(1);
      document.querySelector("#visible").innerText = words.slice(0, index).join(' ') + " ";
      document.querySelector("#unread").innerText = words.slice(index).join(' ');
    }
    ms = Math.max(0, countDuration - (new Date - countStart));
    countdown = (ms / 1000).toFixed(1);
    if (countDuration > 0) {
      document.querySelector('#countdown').style.display = '';
      if (tableOwner === publicname) {
        return document.querySelector('#countdown').innerText = countdown;
      } else {
        return document.querySelector('#countdown').innerText = countdown + ' ' + tableOwner + ": " + currentGuess;
      }
    } else {
      document.querySelector('#guess').style.display = "none";
      return document.querySelector('#countdown').style.display = 'none';
    }
  };

  setInterval(stateUpdater, 50);

  synchronize = function(data) {
    if (data.question) {
      currentQuestion = data.question;
    }
    sync_offset = +(new Date) - data.time;
    countDuration = data.countDuration;
    countStart = +(new Date);
    lastTime = data.lastTime;
    revealDelay = data.revealDelay;
    timeFreeze = data.timeFreeze;
    tableOwner = data.tableOwner;
    currentGuess = data.guess;
    isCompleted = data.completed;
    return stateUpdater();
  };

  socket.on('sync', synchronize);

  socket.on('disconnect', function() {
    document.querySelector('#disco').style.display = '';
    return document.querySelector('#main').style.display = 'none';
  });

  testLatency = function() {
    var initialTime;
    initialTime = +(new Date);
    return socket.emit('echo', {}, function(firstServerTime) {
      var recieveTime;
      recieveTime = +(new Date);
      return socket.emit('echo', {}, function(secondServerTime) {
        var CSC1, CSC2, SCS1, secondTime;
        secondTime = +(new Date);
        CSC1 = recieveTime - initialTime;
        CSC2 = secondTime - recieveTime;
        SCS1 = secondServerTime - firstServerTime;
        return console.log(CSC1, SCS1, CSC2);
      });
    });
  };

  document.addEventListener('keydown', function(e) {
    if (tableOwner === publicname) {

    } else if (e.keyCode === 13) {
      socket.emit('buzz', {
        name: publicname,
        id: identifier
      }, function(status) {
        if (status === "who's awesome? you are!") {
          document.querySelector('#guess').style.display = "";
          document.querySelector('#guess').value = "";
          document.querySelector('#guess').focus();
        }
        return console.log("current state", status);
      });
      return console.log("pressed enter");
    } else if (e.keyCode === 90) {
      return socket.emit('unpause', "because the universe makes no sense", function(status) {
        return console.log("pause permissions", status);
      });
    } else if (e.keyCode === 80) {
      return socket.emit('pause', "because the universe makes no sense", function(status) {
        return console.log("unpause permissions", status);
      });
    } else if (e.keyCode === 83) {
      return socket.emit('skip', "because the universe makes no sense", function(status) {
        return console.log("skip permissions", status);
      });
    }
  });

  document.addEventListener('keyup', function(e) {
    var typing;
    if (document.activeElement.id === "guess" && tableOwner === publicname) {
      typing = document.querySelector('#guess').value;
      if (e.keyCode === 13 && typing) {
        socket.emit('guess', {
          guess: typing,
          final: true
        }, function(status) {
          return console.log("guess final", status);
        });
        return document.body.focus();
      } else {
        return socket.emit('guess', {
          guess: typing,
          final: false
        }, function(status) {});
      }
    }
  });

}).call(this);
